Segun la especificacion, los valores esperados para el correcto funcionamiento son:
	1 <= month1 <= month2 <= 12
	1 <= day1 , day2 <= 31
	1 <= year <= 10000


Para cada variable, podemos definir un dominio de la siguiente forma:
   -----Las variables 'month1' y 'month2', tiene dominios muy similares, siendo que 'month1' esta contenida dentro de 'month2'
        (con la restriccion de month1 <= month2), dicho esto, definimos los dominios 'dm'

	dm1 = {1,3,5,7,8,10,12} // estos son los meses que tienen 31 dias
	dm2 = {2} 		// este mes en particular (febrero) puede tener 28 o 29 dias, segun el año
	dm3 = {4,6,9,11} 	// este conjunto, pertenece a los meses que poseen 30 dias

   -----La variable 'day1' tiene una sola restriccion, quedando las particiones 'd1'

	d1a = {1,2,3,4,5.. 28}	// estos numeros, son comunes a todos los meses y no hay diferencia entre ellos
	d1b = {29}		// este caso es particular de febrero y los años bisiestos 
	d1c = {30}		// otro caso particular de febrero, que no deberia tener nunca 30 dias
	d1d = {31}		// hay meses donde hay 31 dias, y otros que no
	d1f = {32,33,34 ... ((maxInt))}	// la especificacion, no dice nada sobre estos valores, que son invalidos 

   ----La variable 'day2' tiene una sola restriccion, quedando las particiones 'd2'
	d2a = {((minInt))... -1, 0}	// la especificacion, no dice nada sobre estos valores, que son invalidos 
	d2b = {1,2,3,4,5.. 28}	// estos numeros, son comunes a todos los meses y no hay diferencia entre ellos
	d2c = {29}		// este caso es particular de febrero y los años bisiestos 
	d2d = {30}		// otro caso particular de febrero, que no deberia tener nunca 30 dias
	d2e = {31}		// hay meses donde hay 31 dias, y otros que no (tambien es valor limite)

   ----La variable 'year' tiene cota superior e inferior, quedando las particiones 'dy'
	dy1 = 'años bisiesto' 	// tendriamos que analizar los años que son divisibles por '4', o divisible por '100' y simultaneamente,  no ser divisible por '400'
	dy2 = 'años no bisiesto' - {1, 10000} // el resto de los años, son iguales para el analisis
	

	vamos a usar los valores {day1, month1, day2, month2, year, expected_value}:

	/* Base */            /* 0 */  {1, 1, 12, 31, 1, 364},

	/* Variando month2 */ /* 1 */  {1, 1, 1, 31, 1, 30},    /* 2 */ {1, 1, 2, 31, 1, 31},    /* 3 */ {1, 1, 4, 31, 1, 90},

	/* Variando month1 */ /* 4 */  {2, 1, 12, 31, 1, 333},  /* 5 */ {4, 1, 12, 31, 1, 274},

	/* Variando day1   */ /* 6 */  {1, 31, 12, 31, 1, 334}, /* 7 */ {1, 32, 12, 31, 1, 364}, /* 8 */ {1, 29, 12, 31, 1, 336}, /* 9 */ {1, 30, 12, 31, 1, 335},

	/* Variando day2   */ /* 10 */ {1, 1, 12, 0, 1, 334},     /* 11 */ {1, 1, 12, 1, 1, 334}, /* 12 */ {1, 1, 12, 29, 1 ,362}, /* 13 */ {1, 1, 12 , 30, 1, 363}, /* 14 */ {1, 1, 12, 31, 1, 364},

	/* Variando year   */ /* 15 */ {1, 1, 12, 31, 2016, 365}


	Si bien se han omitido casos, es para no tener redundancia en los test.. por ejemplo:
		{1, 1, 12 , 31, 2017, 364}
	este test, seria valido para la variacion de anio, pero 2017 es anio no bisiesto, al igual que el anio 1, por lo tanto
	es equivalente a probar la base (/* 0 */)

	Otra consideracion especial, es que hemos notado que introduciendo un valor fuera de la especificacion, 
	dicho valor pasa a ser '1', entonces en los casos donde se ingresan valores incorrectos, se considero la misma situacion
